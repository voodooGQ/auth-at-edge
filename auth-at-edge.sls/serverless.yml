service: private-spa

plugins:
- serverless-webpack
- serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs10.x
  region: us-east-1

# After adding a few functions and associated dependencies, individual function
# packages can be created to avoid a single massive zip file.
# This comes at the cost of potential memory issues at build time:
# https://github.com/serverless-heaven/serverless-webpack/issues/299
# package:
#   individually: true

custom:
  webpack:
    excludeFiles:
      - "src/**/*.test.ts"
      - "src/**/__mocks__/*.ts"
    # We could exclude aws-sdk here to trim down the deployment package via
    # webpack-node-externals (see webpack.config.js), but instead we'll
    # include it so the sdk version used is predictable.
    # includeModules:
    #   forceExclude:
    #     - aws-sdk

functions:
  checkAuth:
    handler: src/lambda-edge/check-auth/index.handler
    role: LambdaEdgeExecutionRole
  httpHeaders:
    handler: src/lambda-edge/http-headers/index.handler
    role: LambdaEdgeExecutionRole
  parseAuth:
    handler: src/lambda-edge/parse-auth/index.handler
    role: LambdaEdgeExecutionRole
  refreshAuth:
    handler: src/lambda-edge/refresh-auth/index.handler
    role: LambdaEdgeExecutionRole
  signOut:
    handler: src/lambda-edge/sign-out/index.handler
    role: LambdaEdgeExecutionRole

resources:
  Parameters:
    EmailAddress:
      Type: String
      Description: Default Email to create a user
      Default: ssmith@onica.com
    RedirectPathSignIn:
      Type: String
      Description: The URL path that should handle the redirect from Cognito after sign-in
      Default: /parseauth
    RedirectPathSignOut:
      Type: String
      Description: The URL path that should handle the redirect from Cognito after sign-out
      Default: /
    RedirectPathAuthRefresh:
      Type: String
      Description: The URL path that should handle the JWT refresh request
      Default: /refreshauth
    SignOutUrl:
      Type: String
      Description: The URL path that you can visit to sign-out
      Default: /signout
    CookieSettings:
      Type: String
      Description: The settings for the cookies holding the JWT's. To be provided as a JSON object
      Default: >-
        {
          "idToken": "Path=/; Secure; SameSite=Lax",
          "accessToken": "Path=/; Secure; SameSite=Lax",
          "refreshToken": "Path=/; Secure; SameSite=Lax",
          "nonce": "Path=/; Secure; HttpOnly; Max-Age=1800; SameSite=Lax"
        }
    OAuthScopes:
      Type: String
      Description: The OAuth scopes to request the User Pool to add to the access token JWT. To be provided as a JSON array
      Default: >-
        ["phone", "email", "profile", "openid", "aws.cognito.signin.user.admin"]
    HttpHeaders:
      Type: String
      Description: The HTTP headers to set on all responses from CloudFront. To be provided as a JSON object
      Default: >-
        {
          "Content-Security-Policy": "default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'; connect-src 'self' https://*.amazonaws.com https://*.amazoncognito.com",
          "Strict-Transport-Security": "max-age=31536000; includeSubdomains; preload",
          "Referrer-Policy": "same-origin",
          "X-XSS-Protection": "1; mode=block",
          "X-Frame-Options": "DENY",
          "X-Content-Type-Options": "nosniff"
        }
    CreateCloudFrontDistribution:
      Type: String
      Description: Set to 'false' to skip the creation of a CloudFront distribution and associated resources, such as the private S3 bucket and the sample React app. This may be of use to you, if you just want to create the Lambda@Edge functions to use with your own CloudFront distribution.
      Default: "true"
    Version:
      Type: String
      Description: "Use for development: putting in a new version forces redeployment of Lambda@Edge functions"
      Default: ""
  Resources:
    S3Bucket: ${file(./src/resources/s3.bucket.yml)}
    LambdaEdgeExecutionRole: ${file(./src/resources/lambda_edge_execution.role.yml)}
    CloudFrontOriginAccessIdentity: ${file(./src/resources/cloudfront.oai.yml)}
    CloudFrontBucketPolicy: ${file(./src/resources/cloudfront.bucket_policy.yml)}
    UserPool: ${file(./src/resources/default.userpool.yml)}
    User: ${file(./src/resources/default.userpooluser.yml)}
    UserPoolClient: ${file(./src/resources/default.userpoolclient.yml)}
